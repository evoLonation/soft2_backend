// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	applyFileFieldNames          = builder.RawFieldNames(&ApplyFile{})
	applyFileRows                = strings.Join(applyFileFieldNames, ",")
	applyFileRowsExpectAutoSet   = strings.Join(stringx.Remove(applyFileFieldNames, "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	applyFileRowsWithPlaceHolder = strings.Join(stringx.Remove(applyFileFieldNames, "`apply_id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"
)

type (
	applyFileModel interface {
		Insert(ctx context.Context, data *ApplyFile) (sql.Result, error)
		FindOne(ctx context.Context, applyId int64) (*ApplyFile, error)
		Update(ctx context.Context, data *ApplyFile) error
		Delete(ctx context.Context, applyId int64) error
	}

	defaultApplyFileModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ApplyFile struct {
		ApplyId  int64  `db:"apply_id"`
		FileName string `db:"file_name"`
	}
)

func newApplyFileModel(conn sqlx.SqlConn) *defaultApplyFileModel {
	return &defaultApplyFileModel{
		conn:  conn,
		table: "`apply_file`",
	}
}

func (m *defaultApplyFileModel) Delete(ctx context.Context, applyId int64) error {
	query := fmt.Sprintf("delete from %s where `apply_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, applyId)
	return err
}

func (m *defaultApplyFileModel) FindOne(ctx context.Context, applyId int64) (*ApplyFile, error) {
	query := fmt.Sprintf("select %s from %s where `apply_id` = ? limit 1", applyFileRows, m.table)
	var resp ApplyFile
	err := m.conn.QueryRowCtx(ctx, &resp, query, applyId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApplyFileModel) Insert(ctx context.Context, data *ApplyFile) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, applyFileRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ApplyId, data.FileName)
	return ret, err
}

func (m *defaultApplyFileModel) Update(ctx context.Context, data *ApplyFile) error {
	query := fmt.Sprintf("update %s set %s where `apply_id` = ?", m.table, applyFileRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.FileName, data.ApplyId)
	return err
}

func (m *defaultApplyFileModel) tableName() string {
	return m.table
}
