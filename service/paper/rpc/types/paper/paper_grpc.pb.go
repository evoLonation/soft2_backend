// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: paper.proto

package paper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamGreeterClient is the client API for StreamGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamGreeterClient interface {
	CheckScholar(ctx context.Context, in *CheckScholarReq, opts ...grpc.CallOption) (*CreateScholarReply, error)
	ListCheckScholar(ctx context.Context, in *ListCheckScholarReq, opts ...grpc.CallOption) (*ListCreateScholarReply, error)
	MovePaper(ctx context.Context, in *MovePaperReq, opts ...grpc.CallOption) (*MovePaperReply, error)
	GetPaperName(ctx context.Context, in *GetPaperNameReq, opts ...grpc.CallOption) (*GetPaperNameReply, error)
}

type streamGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamGreeterClient(cc grpc.ClientConnInterface) StreamGreeterClient {
	return &streamGreeterClient{cc}
}

func (c *streamGreeterClient) CheckScholar(ctx context.Context, in *CheckScholarReq, opts ...grpc.CallOption) (*CreateScholarReply, error) {
	out := new(CreateScholarReply)
	err := c.cc.Invoke(ctx, "/paper.StreamGreeter/CheckScholar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) ListCheckScholar(ctx context.Context, in *ListCheckScholarReq, opts ...grpc.CallOption) (*ListCreateScholarReply, error) {
	out := new(ListCreateScholarReply)
	err := c.cc.Invoke(ctx, "/paper.StreamGreeter/ListCheckScholar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) MovePaper(ctx context.Context, in *MovePaperReq, opts ...grpc.CallOption) (*MovePaperReply, error) {
	out := new(MovePaperReply)
	err := c.cc.Invoke(ctx, "/paper.StreamGreeter/MovePaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) GetPaperName(ctx context.Context, in *GetPaperNameReq, opts ...grpc.CallOption) (*GetPaperNameReply, error) {
	out := new(GetPaperNameReply)
	err := c.cc.Invoke(ctx, "/paper.StreamGreeter/GetPaperName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamGreeterServer is the server API for StreamGreeter service.
// All implementations must embed UnimplementedStreamGreeterServer
// for forward compatibility
type StreamGreeterServer interface {
	CheckScholar(context.Context, *CheckScholarReq) (*CreateScholarReply, error)
	ListCheckScholar(context.Context, *ListCheckScholarReq) (*ListCreateScholarReply, error)
	MovePaper(context.Context, *MovePaperReq) (*MovePaperReply, error)
	GetPaperName(context.Context, *GetPaperNameReq) (*GetPaperNameReply, error)
	mustEmbedUnimplementedStreamGreeterServer()
}

// UnimplementedStreamGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedStreamGreeterServer struct {
}

func (UnimplementedStreamGreeterServer) CheckScholar(context.Context, *CheckScholarReq) (*CreateScholarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckScholar not implemented")
}
func (UnimplementedStreamGreeterServer) ListCheckScholar(context.Context, *ListCheckScholarReq) (*ListCreateScholarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCheckScholar not implemented")
}
func (UnimplementedStreamGreeterServer) MovePaper(context.Context, *MovePaperReq) (*MovePaperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovePaper not implemented")
}
func (UnimplementedStreamGreeterServer) GetPaperName(context.Context, *GetPaperNameReq) (*GetPaperNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaperName not implemented")
}
func (UnimplementedStreamGreeterServer) mustEmbedUnimplementedStreamGreeterServer() {}

// UnsafeStreamGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamGreeterServer will
// result in compilation errors.
type UnsafeStreamGreeterServer interface {
	mustEmbedUnimplementedStreamGreeterServer()
}

func RegisterStreamGreeterServer(s grpc.ServiceRegistrar, srv StreamGreeterServer) {
	s.RegisterService(&StreamGreeter_ServiceDesc, srv)
}

func _StreamGreeter_CheckScholar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckScholarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).CheckScholar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paper.StreamGreeter/CheckScholar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).CheckScholar(ctx, req.(*CheckScholarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_ListCheckScholar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCheckScholarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).ListCheckScholar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paper.StreamGreeter/ListCheckScholar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).ListCheckScholar(ctx, req.(*ListCheckScholarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_MovePaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovePaperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).MovePaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paper.StreamGreeter/MovePaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).MovePaper(ctx, req.(*MovePaperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_GetPaperName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaperNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).GetPaperName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paper.StreamGreeter/GetPaperName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).GetPaperName(ctx, req.(*GetPaperNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamGreeter_ServiceDesc is the grpc.ServiceDesc for StreamGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paper.StreamGreeter",
	HandlerType: (*StreamGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckScholar",
			Handler:    _StreamGreeter_CheckScholar_Handler,
		},
		{
			MethodName: "ListCheckScholar",
			Handler:    _StreamGreeter_ListCheckScholar_Handler,
		},
		{
			MethodName: "MovePaper",
			Handler:    _StreamGreeter_MovePaper_Handler,
		},
		{
			MethodName: "GetPaperName",
			Handler:    _StreamGreeter_GetPaperName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paper.proto",
}
