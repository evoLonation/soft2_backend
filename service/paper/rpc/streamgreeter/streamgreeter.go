// Code generated by goctl. DO NOT EDIT.
// Source: paper.proto

package streamgreeter

import (
	"context"

	"soft2_backend/service/paper/rpc/paper"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuthorJSON             = paper.AuthorJSON
	CheckScholarReq        = paper.CheckScholarReq
	CreateScholarReply     = paper.CreateScholarReply
	GetPaperReply          = paper.GetPaperReply
	GetPaperReq            = paper.GetPaperReq
	ListCheckScholarReq    = paper.ListCheckScholarReq
	ListCreateScholarReply = paper.ListCreateScholarReply
	ListGetPaperReply      = paper.ListGetPaperReply
	ListGetPaperReq        = paper.ListGetPaperReq
	MovePaperReply         = paper.MovePaperReply
	MovePaperReq           = paper.MovePaperReq

	StreamGreeter interface {
		CheckScholar(ctx context.Context, in *CheckScholarReq, opts ...grpc.CallOption) (*CreateScholarReply, error)
		ListCheckScholar(ctx context.Context, in *ListCheckScholarReq, opts ...grpc.CallOption) (*ListCreateScholarReply, error)
		MovePaper(ctx context.Context, in *MovePaperReq, opts ...grpc.CallOption) (*MovePaperReply, error)
		GetPaper(ctx context.Context, in *GetPaperReq, opts ...grpc.CallOption) (*GetPaperReply, error)
		ListGetPaper(ctx context.Context, in *ListGetPaperReq, opts ...grpc.CallOption) (*ListGetPaperReply, error)
	}

	defaultStreamGreeter struct {
		cli zrpc.Client
	}
)

func NewStreamGreeter(cli zrpc.Client) StreamGreeter {
	return &defaultStreamGreeter{
		cli: cli,
	}
}

func (m *defaultStreamGreeter) CheckScholar(ctx context.Context, in *CheckScholarReq, opts ...grpc.CallOption) (*CreateScholarReply, error) {
	client := paper.NewStreamGreeterClient(m.cli.Conn())
	return client.CheckScholar(ctx, in, opts...)
}

func (m *defaultStreamGreeter) ListCheckScholar(ctx context.Context, in *ListCheckScholarReq, opts ...grpc.CallOption) (*ListCreateScholarReply, error) {
	client := paper.NewStreamGreeterClient(m.cli.Conn())
	return client.ListCheckScholar(ctx, in, opts...)
}

func (m *defaultStreamGreeter) MovePaper(ctx context.Context, in *MovePaperReq, opts ...grpc.CallOption) (*MovePaperReply, error) {
	client := paper.NewStreamGreeterClient(m.cli.Conn())
	return client.MovePaper(ctx, in, opts...)
}

func (m *defaultStreamGreeter) GetPaper(ctx context.Context, in *GetPaperReq, opts ...grpc.CallOption) (*GetPaperReply, error) {
	client := paper.NewStreamGreeterClient(m.cli.Conn())
	return client.GetPaper(ctx, in, opts...)
}

func (m *defaultStreamGreeter) ListGetPaper(ctx context.Context, in *ListGetPaperReq, opts ...grpc.CallOption) (*ListGetPaperReply, error) {
	client := paper.NewStreamGreeterClient(m.cli.Conn())
	return client.ListGetPaper(ctx, in, opts...)
}
