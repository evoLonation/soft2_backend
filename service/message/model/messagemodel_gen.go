// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	messageFieldNames          = builder.RawFieldNames(&Message{})
	messageRows                = strings.Join(messageFieldNames, ",")
	messageRowsExpectAutoSet   = strings.Join(stringx.Remove(messageFieldNames, "`msgId`", "`msgTime`"), ",")
	messageRowsWithPlaceHolder = strings.Join(stringx.Remove(messageFieldNames, "`msgId`", "`msgTime`"), "=?,") + "=?"
)

type (
	messageModel interface {
		Insert(ctx context.Context, data *Message) (sql.Result, error)
		FindOne(ctx context.Context, msgId int64) (*Message, error)
		Update(ctx context.Context, data *Message) error
		Delete(ctx context.Context, msgId int64) error
	}

	defaultMessageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Message struct {
		MsgId       int64          `db:"msgId"`
		ReceiverId  int64          `db:"receiverId"`  // 接收者Id
		Content     string         `db:"content"`     // 消息内容
		MessageType int64          `db:"messageType"` // 消息类型
		Read        bool           `db:"read"`        // 消息状态
		MsgTime     time.Time      `db:"msgTime"`
		Result      sql.NullInt64  `db:"result"` // 处理结果
		UId         sql.NullInt64  `db:"uId"`    // 用户id
		GId         sql.NullInt64  `db:"gId"`    // 误认领申诉Id
		PId         sql.NullString `db:"pId"`    // 文献id
		RId         sql.NullInt64  `db:"rId"`    // 文献互助Id
	}
)

func newMessageModel(conn sqlx.SqlConn) *defaultMessageModel {
	return &defaultMessageModel{
		conn:  conn,
		table: "`message`",
	}
}

func (m *defaultMessageModel) Delete(ctx context.Context, msgId int64) error {
	query := fmt.Sprintf("delete from %s where `msgId` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, msgId)
	return err
}

func (m *defaultMessageModel) FindOne(ctx context.Context, msgId int64) (*Message, error) {
	query := fmt.Sprintf("select %s from %s where `msgId` = ? limit 1", messageRows, m.table)
	var resp Message
	err := m.conn.QueryRowCtx(ctx, &resp, query, msgId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMessageModel) Insert(ctx context.Context, data *Message) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, messageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ReceiverId, data.Content, data.MessageType, data.Read, data.Result, data.UId, data.GId, data.PId, data.RId)
	return ret, err
}

func (m *defaultMessageModel) Update(ctx context.Context, data *Message) error {
	query := fmt.Sprintf("update %s set %s where `msgId` = ?", m.table, messageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ReceiverId, data.Content, data.MessageType, data.Read, data.Result, data.UId, data.GId, data.PId, data.RId, data.MsgId)
	return err
}

func (m *defaultMessageModel) tableName() string {
	return m.table
}
