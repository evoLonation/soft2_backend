// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	likeFieldNames          = builder.RawFieldNames(&Like{})
	likeRows                = strings.Join(likeFieldNames, ",")
	likeRowsExpectAutoSet   = strings.Join(stringx.Remove(likeFieldNames, "`like_id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), ",")
	likeRowsWithPlaceHolder = strings.Join(stringx.Remove(likeFieldNames, "`like_id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), "=?,") + "=?"

	cacheLikeLikeIdPrefix = "cache:like:likeId:"
)

type (
	likeModel interface {
		Insert(ctx context.Context, data *Like) (sql.Result, error)
		FindOne(ctx context.Context, likeId int64) (*Like, error)
		FindLikeId(ctx context.Context, userId int64, commentId int64) (*Like, error)
		Update(ctx context.Context, data *Like) error
		Delete(ctx context.Context, likeId int64) error
	}

	defaultLikeModel struct {
		sqlc.CachedConn
		table string
	}

	Like struct {
		LikeId    int64 `db:"like_id"`
		UserId    int64 `db:"user_id"`
		CommentId int64 `db:"comment_id"`
	}
)

func newLikeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultLikeModel {
	return &defaultLikeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`like`",
	}
}

func (m *defaultLikeModel) Delete(ctx context.Context, likeId int64) error {
	likeLikeIdKey := fmt.Sprintf("%s%v", cacheLikeLikeIdPrefix, likeId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `like_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, likeId)
	}, likeLikeIdKey)
	return err
}

func (m *defaultLikeModel) FindOne(ctx context.Context, likeId int64) (*Like, error) {
	likeLikeIdKey := fmt.Sprintf("%s%v", cacheLikeLikeIdPrefix, likeId)
	var resp Like
	err := m.QueryRowCtx(ctx, &resp, likeLikeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `like_id` = ? limit 1", likeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, likeId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultLikeModel) FindLikeId(ctx context.Context, userId int64, commentId int64) (*Like, error) {
	likeLikeIdKey := fmt.Sprintf("%s%v%v", cacheLikeLikeIdPrefix, userId, commentId)
	var resp Like
	err := m.QueryRowCtx(ctx, &resp, likeLikeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `comment_id`=? limit 2", likeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId, commentId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultLikeModel) Insert(ctx context.Context, data *Like) (sql.Result, error) {
	likeLikeIdKey := fmt.Sprintf("%s%v", cacheLikeLikeIdPrefix, data.LikeId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, likeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.CommentId)
	}, likeLikeIdKey)
	return ret, err
}

func (m *defaultLikeModel) Update(ctx context.Context, data *Like) error {
	likeLikeIdKey := fmt.Sprintf("%s%v", cacheLikeLikeIdPrefix, data.LikeId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `like_id` = ?", m.table, likeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.CommentId, data.LikeId)
	}, likeLikeIdKey)
	return err
}

func (m *defaultLikeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheLikeLikeIdPrefix, primary)
}

func (m *defaultLikeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `like_id` = ? limit 1", likeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLikeModel) tableName() string {
	return m.table
}
