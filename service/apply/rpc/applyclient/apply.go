// Code generated by goctl. DO NOT EDIT!
// Source: apply.proto

package applyclient

import (
	"context"

	"soft2_backend/service/apply/rpc/types/apply"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateIdentifyReply = apply.CreateIdentifyReply
	CreateIdentifyReq   = apply.CreateIdentifyReq

	Apply interface {
		CreateIdentify(ctx context.Context, in *CreateIdentifyReq, opts ...grpc.CallOption) (*CreateIdentifyReply, error)
	}

	defaultApply struct {
		cli zrpc.Client
	}
)

func NewApply(cli zrpc.Client) Apply {
	return &defaultApply{
		cli: cli,
	}
}

func (m *defaultApply) CreateIdentify(ctx context.Context, in *CreateIdentifyReq, opts ...grpc.CallOption) (*CreateIdentifyReply, error) {
	client := apply.NewApplyClient(m.cli.Conn())
	return client.CreateIdentify(ctx, in, opts...)
}
