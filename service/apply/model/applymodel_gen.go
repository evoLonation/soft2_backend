// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	applyFieldNames          = builder.RawFieldNames(&Apply{})
	applyRows                = strings.Join(applyFieldNames, ",")
	applyRowsExpectAutoSet   = strings.Join(stringx.Remove(applyFieldNames, "`applyId`", "`status`", "`applyTime`"), ",")
	applyRowsWithPlaceHolder = strings.Join(stringx.Remove(applyFieldNames, "`applyId`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`applyTime`"), "=?,") + "=?"
)

type (
	applyModel interface {
		Insert(ctx context.Context, data *Apply) (sql.Result, error)
		FindOne(ctx context.Context, applyId int64) (*Apply, error)
		Update(ctx context.Context, data *Apply) error
		Delete(ctx context.Context, applyId int64) error
	}

	defaultApplyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Apply struct {
		ApplyId   int64          `db:"applyId"`
		UserId    int64          `db:"userId"`    // 用户id
		ScholarId int64          `db:"scholarId"` // 学者id
		Status    int64          `db:"status"`    // 处理状态
		ApplyType int64          `db:"applyType"` // 认证类型
		Email     sql.NullString `db:"email"`     // 认证邮箱
		Url       sql.NullString `db:"url"`       // 认证证件
		ApplyTime time.Time      `db:"applyTime"`
	}
)

func newApplyModel(conn sqlx.SqlConn) *defaultApplyModel {
	return &defaultApplyModel{
		conn:  conn,
		table: "`apply`",
	}
}

func (m *defaultApplyModel) Delete(ctx context.Context, applyId int64) error {
	query := fmt.Sprintf("delete from %s where `applyId` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, applyId)
	return err
}

func (m *defaultApplyModel) FindOne(ctx context.Context, applyId int64) (*Apply, error) {
	query := fmt.Sprintf("select %s from %s where `applyId` = ? limit 1", applyRows, m.table)
	var resp Apply
	err := m.conn.QueryRowCtx(ctx, &resp, query, applyId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApplyModel) Insert(ctx context.Context, data *Apply) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, applyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ScholarId, data.ApplyType, data.Email, data.Url)
	return ret, err
}

func (m *defaultApplyModel) Update(ctx context.Context, data *Apply) error {
	query := fmt.Sprintf("update %s set %s where `applyId` = ?", m.table, applyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ScholarId, data.Status, data.ApplyType, data.Email, data.Url, data.ApplyId)
	return err
}

func (m *defaultApplyModel) tableName() string {
	return m.table
}
