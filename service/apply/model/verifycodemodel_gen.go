// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	verifycodeFieldNames          = builder.RawFieldNames(&Verifycode{})
	verifycodeRows                = strings.Join(verifycodeFieldNames, ",")
	verifycodeRowsExpectAutoSet   = strings.Join(stringx.Remove(verifycodeFieldNames, "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	verifycodeRowsWithPlaceHolder = strings.Join(stringx.Remove(verifycodeFieldNames, "`email`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"
)

type (
	verifycodeModel interface {
		Insert(ctx context.Context, data *Verifycode) (sql.Result, error)
		FindOne(ctx context.Context, email string) (*Verifycode, error)
		Update(ctx context.Context, data *Verifycode) error
		Delete(ctx context.Context, email string) error
	}

	defaultVerifycodeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Verifycode struct {
		Email      string    `db:"email"` // 认证邮箱
		Code       string    `db:"code"`  // 验证码
		CreateTime time.Time `db:"create_time"`
	}
)

func newVerifycodeModel(conn sqlx.SqlConn) *defaultVerifycodeModel {
	return &defaultVerifycodeModel{
		conn:  conn,
		table: "`verifycode`",
	}
}

func (m *defaultVerifycodeModel) Delete(ctx context.Context, email string) error {
	query := fmt.Sprintf("delete from %s where `email` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, email)
	return err
}

func (m *defaultVerifycodeModel) FindOne(ctx context.Context, email string) (*Verifycode, error) {
	query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", verifycodeRows, m.table)
	var resp Verifycode
	err := m.conn.QueryRowCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVerifycodeModel) Insert(ctx context.Context, data *Verifycode) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, verifycodeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Email, data.Code)
	return ret, err
}

func (m *defaultVerifycodeModel) Update(ctx context.Context, data *Verifycode) error {
	query := fmt.Sprintf("update %s set %s where `email` = ?", m.table, verifycodeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Code, data.Email)
	return err
}

func (m *defaultVerifycodeModel) tableName() string {
	return m.table
}
